#!/bin/bash

export BUILD_DIR=${BUILD_DIR:-/usr/lib/build}

IS_UNSHARED=

while test -n "$1" ; do
    case "$1" in
	--root)
	    BUILD_ROOT="$2"
	    shift 2
	    ;;
	--isunshared)
	    IS_UNSHARED=true
	    shift
	    ;;
	*)
	    break
	    ;;
    esac
done

if test -z "$BUILD_ROOT" ; then
    echo "Usage: call-flatpak-builder --root <buildroot>"
    exit 1
fi

if test -z "$IS_UNSHARED" ; then
    echo "Unsharing environment"
    # unshare mounts and network
    exec unshare -m -n $BUILD_DIR/call-openwrt-sdk --isunshared --root "$BUILD_ROOT" "$@"
    exit 1
fi

if test -n "$IS_UNSHARED" ; then
    # make mounts private
    mount --make-rprivate /
fi

if test "$BUILD_ROOT" != '/' ; then
    # make build root a mount point
    mount --rbind --make-private "$BUILD_ROOT" "$BUILD_ROOT"
    mount --make-rprivate "$BUILD_ROOT"
fi

# setup mounts
test -e "$BUILD_ROOT/proc/self" || mount -n -tproc none $BUILD_ROOT/proc

set -x

# Get the SDK
#chroot "$BUILD_ROOT" bash -c "mkdir -p sdk && curl -L $SDKURL -o sdkarchive && tar xf sdkarchive --strip-components=1 -C sdk"
# Set up the SDK
#chroot "$BUILD_ROOT" bash -c "cd sdk && ./scripts/feeds update -a"



# Create bundle from repo
VERSION_RELEASE="$FLATPAK_APP_VERSION"
if [[ -n $RELEASE ]]; then
    VERSION_RELEASE+="-$RELEASE"
fi
chroot "$BUILD_ROOT" bash -c "chmod 777 -R sdk"
chroot "$BUILD_ROOT" bash -c "cd sdk && grep localrepo feeds.conf.default || echo \"src-link localrepo /repo/\" >> feeds.conf.default"
chroot "$BUILD_ROOT" bash -c ". /etc/profile && cd sdk && ./scripts/feeds update myrepo"
chroot "$BUILD_ROOT" bash -c "cd sdk && ./scripts/feeds install $NAME"
chroot "$BUILD_ROOT" bash -c "cd sdk && make defconfig"

# Hack to prepare for compile
chroot "$BUILD_ROOT" bash -c "cp -f /usr/bin/git /usr/bin/git.bak && cp -f /bin/true /usr/bin/git"

chroot "$BUILD_ROOT" bash -c "cd sdk && make package/$NAME/compile V=s -j9"

# Fix git
chroot "$BUILD_ROOT" bash -c "mv /usr/bin/git.bak /usr/bin/git"


chroot "$BUILD_ROOT" bash -c "cd sdk && make package/index V=s"
